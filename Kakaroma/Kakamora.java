/*
Task 1: Kakamora
You will be given a series of NxN grids where each square contains the population of the Kakamora. 
The first line will contain the number of squares in each direction N, followed by the NxN grid itself. 
You may assume N is no larger than 100. The end of input will be denoted by a 0 as the value of N.
Moana only moves east, south, or south-east from one square to another until she reaches the final location.
For each grid, output the minimum number of Kakamora encountered on one line, followed by the path taken on the next 
(indicate paths by printing the sequence of squares visited as denoted by the Kakamora population).

Sample Input
5       
1 5 2 3 6
4 3 2 1 2
3 8 9 2 1
0 5 2 3 4
3 1 4 2 1
Sample Output
12
1 3 2 2 3 1

Your task:
The following code is generated by Copilot. You need to modify the code to make it work.
*/


/* COPILOT CODE STARTS HERE */

import java.util.Scanner;

public class Kakamora {
    /* When you finish modifying readGrid(int n), please let the interviewer know!!!
     *
     * readGrid(int n) reads the input and return the grid
     */
    public static int[][] readGrid(int n) {
        int[][] grid = new int[n][n];
        Scanner sc = new Scanner(System.in);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                grid[i][j] = sc.nextInt();
            }
        }
        return grid;
    }


    /* When you finish modifying table(int[][] grid), please let the interviewer know!!!
     *
     * table(int[][] grid) calculates the minimum number of Kakamora encountered from the top left corner to the bottom right corner.
     * The bottom right corner should be the minimum number of Kakamora encountered.
     */
    public static int[][] table(int[][] grid) {
        int n = grid.length;
        int[][] table = new int[n][n];
        table[0][0] = grid[0][0];
        for (int i = 1; i < n; i++) {
            table[0][i] = table[0][i - 1] + grid[0][i];
            table[i][0] = table[i - 1][0] + grid[i][0];
        }
        for (int i = 1; i <= n - 1; i++) {
            for (int j = 1; j <= n - 1; j++) {
                table[i][j] = Math.min(table[i - 1][j], table[i][j - 1]) + grid[i][j];
            }
        }
        return table;
    }

    /* When you finish modifying printPath(int[][] grid), please let the interviewer know!!!
     * printPath(int[][] grid) reversely find the path from the bottom right corner to the top left corner
     */
    public static void printPath(int[][] grid) {
        int n = grid.length;
        int[][] table = table(grid);

        int i = n - 1;
        int j = n - 1;
        String path = "";
        while (i != 0 || j != 0) {
            if (i == 0) {
                path = "2 " + path;
                j--;
            } else if (j == 0) {
                path = "3 " + path;
                i--;
            } else if (table[i - 1][j] < table[i][j - 1]) {
                path = "3 " + path;
                i--;
            } else {
                path = "2 " + path;
                j--;
            }
        }
        path = "1 " + path;
        System.out.println(table[n - 1][n - 1]);
        System.out.println(path);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        while (n != 0) {
            int[][] grid = readGrid(n);
            printPath(grid);
            n = sc.nextInt();
        }
    }
}

/* COPILOT CODE ENDS HERE */